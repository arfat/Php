package com.glam.utils {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		public class SeekBar extends MovieClip	{		private var mcScrubber:MovieClip				private var mcBarStatus:MovieClip				private var dragging:Boolean		private var rectangle:Rectangle		public var decorDispatcher:DecoratedDispatcher		private var _thumbPos:Number = 0		public var maxWidth = 0		private var nCurrentWidth = 0		private var mcBuffBar:MovieClip						public function SeekBar() 		{			mcScrubber = mcScrub			mcBar = mcBar			mcBuffBar = mcBufferBar			mcBarStatus = mcStatusBar			initSeekBar()			addScrubberDragEvents()						//trace('SeekBar Loaded')		}				public function initSeekbarVar()		{			//trace('SeekBar Reset')						//trace(maxWidth)		}				public function set bgWidth(_value)		{			mcBar.width = _value - mcScrub.width		}				private function initSeekBar()		{			decorDispatcher = new DecoratedDispatcher();			dragging = false;						mcScrubber.x = 0			mcBarStatus.width = 0		}				private function addScrubberDragEvents():void		{			mcScrubber.addEventListener(MouseEvent.MOUSE_DOWN, dragIt);			parent.addEventListener(MouseEvent.MOUSE_UP, dropIt);			parent.parent.addEventListener(MouseEvent.MOUSE_UP, dropIt);			//parent.parent.parent.addEventListener(MouseEvent.MOUSE_UP, dropIt);			// addEvents		}								private function updateThumbPos(e:MouseEvent):void		{			_thumbPos = mcBar.mouseX		}		private function updateSeekBar(e:MouseEvent):void		{			mcScrubber.x = mouseX;			mcBarStatus.width = mcScrubber.x						decorDispatcher.dispatchEvent(new Event("ScrubberUpdated"));		}				private function dragIt(e:MouseEvent):void		{			rectangle = new Rectangle(0,0,totalLength,0);			mcScrubber.startDrag(false,rectangle);			dragging = true;			decorDispatcher.dispatchEvent(new Event("ScrubberPressed"));			mcScrubber.addEventListener(Event.ENTER_FRAME, adjustStatus);		}				private function adjustStatus(e:Event):void		{			mcBarStatus.width = mcScrubber.x		}				private function dropIt(e:MouseEvent):void		{			if (dragging)			{				mcScrubber.stopDrag();				decorDispatcher.dispatchEvent(new Event("ScrubberUpdated"));				dragging = false;			}		}					public function set scrubberPosition(arrTemp):void		{			var nCurrent = Number(arrTemp[0])			var nTotal = Number(arrTemp[1])			mcScrubber.x = (nCurrent * (mcBar.width-mcScrubber.width)) / nTotal			if (mcScrubber.x > maxWidth)			{				//trace("changing width")				maxWidth = mcScrubber.x			}			mcBarStatus.width = mcScrubber.x		}		public function set bufferingStatus(_value)		{			var current = _value[0]			var total = _value[1]			mcBuffBar.width = mcBar.width*(current/total)		}		public function get totalLength():Number		{			return (mcBar.width-mcScrubber.width)		}				public function get thumbPos():Number		{			return _thumbPos		}		public function get scrubberPosition():Number		{			return mcScrubber.x		}					}}